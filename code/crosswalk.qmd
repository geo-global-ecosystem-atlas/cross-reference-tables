---
title: "create crosswalk tables"
author: "Ben Cresswell"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4.8
    fig-height: 3
    fig-dpi: 100
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
      cache: true
    ## Rendering
    embed-resources: true
documentclass: article
fontsize: 12pt
execute-dir: project
mainfont: Arial
classoption: a4paper
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
```

# Prep

## Libraries
```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false 
library(googlesheets4)
library(tidyverse)  #for data wrangling etc
```

## Load database stages
```{r}
rm(list=ls())
stage_1 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_1_MASTER")
stage_2 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_2_MASTER")
stage_3 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_3_MASTER")
crosswalk <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Crosswalk_MASTER")
```

## Checks
```{r}
#glimpse(stage_1)
#glimpse(stage_2)
#glimpse(stage_3)
#glimpse(crosswalk)
head(stage_1)
head(stage_2)
head(stage_3)
head(crosswalk)

catalogue_vars <- colnames(stage_1) |> as_tibble()
```



### Source resolution

```{r}


stage_2 |> 
  mutate(source_resolution = map(source_resolution, ~ifelse(is.null(.x), NA, .x)) |> unlist()) 



summary(stage_2$time_start)summarsummary()y(stage_2$time_start)
as.POSIXct(stage_2$time_start, format = "%d-%m-%Y", tz="")

stage_2$time_start |> unlist() |> 
  as.POSIXct()
```



### Reported accuracy

```{r}


stage_2 |> 
  mutate(`reported_accuracy(%)` = map(`reported_accuracy(%)`, ~ifelse(is.null(.x), NA, .x)) |> unlist()) 



summary(stage_2$time_start)summarsummary()y(stage_2$time_start)
as.POSIXct(stage_2$time_start, format = "%d-%m-%Y", tz="")

stage_2$time_start |> unlist() |> 
  as.POSIXct()
```




# Stage 3 download date
```{r}
summary(stage_3$download_date)


stage_3 |> 
  mutate(download_date = as_date(download_date))
```







## Wrangle

### Full database of all datasets ever discovered by the project
```{r}
datasets_catalogue <- 
  stage_1 |> 
#  full_join(stage_2) |> 
#  full_join(stage_3) |> 
  mutate_if(is_character, as_factor)
```

## Check
```{r}
datasets_catalogue
```


### Database of all datasets passed through to Stage 3
Currently contains all fields possible from all 3 stages, but only for datasets that have made it through to Stage 3
```{r}
 EAp_Sources_Info <- 
  stage_3 |> 
  left_join(stage_2) |> 
  left_join(stage_1) |> 
  mutate_if(is_character, as_factor) |> 
  filter(geo_pass == 'TRUE') |> 
  select(Source_ID, 
         data_id_code,
         
         title,
         time_start,
         time_end,
         published_year,
         dataset_citation,
         licence,
         DOI,
         file_type,
         vector_raster,
         source_resolution,
         domain_class,
         `reported_accuracy(%)`,
         download_date,
         download_url,
         #license_download_link,
         licence_link,
         abstract,
         detailed_description) |> 
  arrange(Source_ID)
```



```{r}
EAp_Sources_Info2 <- EAp_Sources_Info |> 
  mutate(`reported_accuracy(%)` = na_if(`reported_accuracy(%)`, "NULL"))
```







# What has passed Stage 3 but not been crosswalked yet?

```{r}
need_cw <- 
  stage_3 |> 
  select(data_id_code, band_layer_name, geo_pass) |> 
  filter(geo_pass == "TRUE") |> 
  select(data_id_code) |> 
  anti_join(
crosswalk |> 
  select(data_id_code, band_layer_name, efg_description) |> 
  filter(!is.na(efg_description)) |> 
  select(data_id_code) |> 
  distinct()
)
```


## Crosswalked datasets - final
```{r}
final_crosswalked <- crosswalk |> 
  select(data_id_code, status)  |> 
  distinct() |> 
  filter(status == "FINAL")
```

## Crosswalked datasets - draft
```{r}
draft_crosswalked <- crosswalk |> 
  select(data_id_code, status)  |> 
  distinct() |> 
  filter(status == "Draft" |
           is.na(status))
```

## Crosswalked datasets - all
```{r}
distinct_crosswalked <- crosswalk |> 
  select(data_id_code, status)  |> 
  distinct() 
```

```{r}
distinct_stage3 <- stage_3 |> 
  select(data_id_code)  |> 
  distinct() 
```





## Write to csv
```{r}
#setwd("../") # Uncomment to render
#write_csv(stage_1, file = paste0('database/db_snapshots/database_Stage1_',Sys.Date(),'.csv'))
#write_csv(stage_2, file = paste0('database/db_snapshots/database_Stage2_',Sys.Date(),'.csv'))
#write_csv(stage_3, file = paste0('database/db_snapshots/database_Stage3_',Sys.Date(),'.csv'))




#write_csv(datasets_catalogue, file = paste0('database/db_snapshots/datasets_catalogue_',Sys.Date(),'.csv'))
write_csv(EAp_Sources_Info, file = paste0('database/db_snapshots/EAp_Sources_Info_',Sys.Date(),'.csv'))
#write_csv(crosswalk, file = paste0('database/db_snapshots/database_crosswalk_',Sys.Date(),'.csv'))
#write_csv(need_cw, file = paste0('database/db_snapshots/need_crosswalk_',Sys.Date(),'.csv'))
#write_csv(database_full, file = paste0('database/db_snapshots/database_full_',Sys.Date(),'.csv'))



```


