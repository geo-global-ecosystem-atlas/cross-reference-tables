---
title: "create crosswalk tables"
author: "Ben Cresswell"
date: today
date-format: "DD/MM/YYYY"
format: 
  html:
    ## Format
    theme: spacelab
    html-math-method: mathjax
    ## Table of contents
    toc: true
    toc-float: true
    ## Numbering
    number-sections: true
    number-depth: 3
    ## Layout
    fig-caption-location: "bottom"
    fig-align: "center"
    fig-width: 4.8
    fig-height: 3
    fig-dpi: 100
    tbl-cap-location: top
    ## Code
    code-fold: false
    code-tools: true
    code-summary: "Show the code"
    code-line-numbers: true
    code-block-border-left: "#ccc"
    highlight-style: zenburn
    ## Execution
    execute:
      echo: true
      cache: true
    ## Rendering
    embed-resources: true
documentclass: article
fontsize: 12pt
execute-dir: project
mainfont: Arial
classoption: a4paper
---

## Set up and housekeeping
```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(cache.lazy = FALSE,
                      tidy = "styler")
options(tinytex.engine = "xelatex")
rm(list=ls())
```


## Libraries
```{r}
#| label: libraries
#| output: false
#| eval: true
#| warning: false
#| message: false
#| cache: false 
library(googlesheets4)
library(tidyverse)  #for data wrangling etc
```

## Load database stages

### Stage 1
```{r}
stage_1 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_1_MASTER") |> 
   select(Source_ID, 
         data_id_code,
         title,
         published_year,
         dataset_citation,
         licence,
         DOI,
         domain_class,
         #abstract,
         #detailed_description,
                  licence_link)
```

### Stage 2
```{r}
stage_2 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_2_MASTER") |> 
   select(Source_ID, 
         year_end,
         file_type,
         vector_raster,
         min_source_resolution,
         min_accuracy_pc) |> 
  mutate(min_source_resolution = map(min_source_resolution, ~ifelse(is.null(.x), NA, .x)) |>   # Fix source resolution var
           unlist() |> 
           as.numeric())  |> 
   mutate(min_accuracy_pc = map(min_accuracy_pc, ~ifelse(is.null(.x), NA, .x)) |>  # Fix reported accuracy var
           unlist()) 
```

### Stage 3
```{r}
stage_3 <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Stage_3_MASTER") |> 
    mutate(download_date = as_date(download_date)) |>    # Make download date be an actual date
  select(!Source_ID)

```


## Master crosswalk table
```{r}
crosswalk <- read_sheet("https://docs.google.com/spreadsheets/d/1GciZm_1l7q_P_2V7rjKcQXCTBzYogo5MpqruoKwim_o/edit#gid=32989082", sheet = "Crosswalk_MASTER") |> 
  mutate(in_class_value = map(in_class_value, ~ifelse(is.null(.x), NA, .x)) |>  unlist()) |>  # In-class vals mixed var types - need unlisting
  mutate(efg_code = map(efg_code, ~ifelse(is.null(.x), NA, .x)) |>  unlist()) |>  # so does efg_code
  filter(status == "final" |
           status == "Final")

```




## Checks
```{r}
head(crosswalk)
```



## Wrangle vars from other stages into crosswalk master tbl if required
```{r}
cw_databands <- crosswalk |> 
  select(Source_ID, data_id_code, band_layer_name) |> 
  distinct() |> 
  mutate(across(where(is.character), as.factor)) |> 
  mutate(Source_ID_fct = factor(str_pad(Source_ID, 4, pad = "0"))) |> 
  arrange(Source_ID_fct) |> 
  group_by(Source_ID_fct) |> 
  mutate(band_no = factor(str_pad(seq_along(Source_ID_fct), 3, pad = "0"))) |> 
  mutate(band_ID = paste0(Source_ID_fct, band_no)) |> 
  ungroup() |> 
  select(!Source_ID_fct)
```


```{r}
crosswalk <- crosswalk  |> 
  left_join(cw_databands)
```


# Remove files not required
```{r}
rm(stage_1, stage_2, stage_3)
```



# Split
```{r}
crosswalk  |>  
  split(crosswalk$band_ID)  |> 
  list2env(envir = globalenv())
```

# Save as separate csv files
Run chunk in one go
```{r}
rm(crosswalk, cw_databands)
dfs <- Filter(function(x) is.data.frame(get(x)) , noquote(ls()))
for (i in dfs){
  print(i)
  write_excel_csv(get(i), paste("crosswalk_tables/", i,".csv", sep=""))  
}
```



```{r}
# Load the necessary libraries
library(tidyverse)
library(purrr)
getwd()
# Define the folder where the CSV files are located
cw_folder <- "crosswalk_tables"

# Get a list of all CSV files in the folder
cw_files <- list.files(cw_folder, pattern = "*.csv", full.names = TRUE)



# Function to process each CSV file and generate the JavaScript dictionary
process_csv_file <- function(file_path) {
  # Read the CSV file
  df <- read_csv(file_path)
  
  # Extract the base filename (e.g., "0010002" without extension)
  #file_name <- tools::file_path_sans_ext(basename(file_path))
  file_name <- df$data_id_code[1]
  
  # Generate the relevant fields
  data_id_code <- file_name
  ee_asset_id <- paste0("projects/UQ_intertidal/gee-geo-atlas/open-datasets/jcu/", df$band_layer_name[1])
  
  # Extract the fields row-wise, keeping NA and repeated values
  in_class_field_name <- df$in_class_field_name
  in_value <- df$in_class_value
  out_value <- df$out_class_value
  efg_names <- df$efg_name
  efg_codes <- df$efg_code
  
  # Generate the JavaScript dictionary content with aligned values row by row
  js_content <- paste0(
    "//", data_id_code, "\n",
    "var ", data_id_code, " = {\n",
    "  data_id_code: '", data_id_code, "',\n",
    "  ee_asset_id: '", ee_asset_id, "',\n",
    "  in_class_field_name: [", paste0("'", in_class_field_name, "'", collapse = ", "), "],\n",
    "  in_value: [", paste0(in_value, collapse = ", "), "],\n",
    "  out_value: [", paste0(out_value, collapse = ", "), "],\n",
    "  efg_names: [", paste0("'", efg_names, "'", collapse = ", "), "],\n",
    "  efg_codes: [", paste0("'", efg_codes, "'", collapse = ", "), "]\n",
    "};\n"
  )
  
  return(js_content)
}

# Process all CSV files and combine the JavaScript content
combined_js_content <- cw_files %>%
  map_chr(process_csv_file) %>%
  paste(collapse = "\n\n")

# Write the combined result to a markdown (.md) file
write(combined_js_content, file = "combined_output.md")

# View the combined JavaScript content (optional)
cat(combined_js_content)


```